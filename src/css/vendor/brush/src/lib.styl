/** mixins from nib **/
// See: https://github.com/tj/nib

/*
 * Replace text with an image.
 */
replace-text(image, x=50%, y=50%)
  hide-text()
  background-image image
  background-repeat no-repeat
  background-position x y

/*
 * Hide text.
 */
hide-text()
	text-indent 101%
	white-space nowrap
	overflow hidden

/*
 * Size utility.
 *
 * Synopsis:
 *
 *   size: <width> <height> | <width & height>
 *
 * Examples:
 *
 *     size: 100% 30px
 *       yields:
 *         width: 100%
 *         height: 30px
 *
 *     size: 5px
 *       yields:
 *         width: 5px
 *         height: 5px
 *
 */
size()
	if length(arguments) == 1
		width: arguments[0]
		height: arguments[0]
	else if length(arguments) > 1
		width: arguments[0]
		height: arguments[1]
	else
		error('missing arg')

/*
 * The Magnificent Micro Clearfix
 *
 * Useful for clearing floats without structural markup.
 * Prevents margin-collapsing on child elements in most cases.
 *
 * Known issues:
 *
 * 1. For IE 6/7 when applied to an element that contains only left-floated
 *    children the bottom margin on child elements will be collapsed.
 *
 * 2. For Firefox versions prior to 3.5 when applied to the first child element
 *    of body, and the element does not have non-zero padding, extra space will
 *    appear between the body and the first child.
 *
 * See http://nicolasgallagher.com/micro-clearfix-hack/
 * and http://j.mp/bestclearfix
 *
 */
clearfix()
	&:before
	&:after
		content: ""
		display: table
	&:after
		clear: both
	zoom: 1 if support-for-ie

/*
 * Overflow utility. Maps to regular overflow, and adds an ellipsis value.
 *
 * Synopsis:
 *
 *   overflow: <type>
 *
 * Examples:
 *
 *     overflow: auto
 *     overflow: hidden
 *     overflow: ellipsis
 *
 */
overflow()
	if arguments[0] == ellipsis
		ellipsis()
	else
		overflow: arguments
/*
 * Ellipsis with wrapping disabled by default.
 */
ellipsis(no-wrap = true)
	if no-wrap
		white-space: nowrap
	overflow: hidden
	text-overflow: ellipsis

/*
 * Position utility.
 *
 * Synopsis:
 *
 *   fixed: <pos> [n] <pos> [n]
 *   absolute: <pos> [n] <pos> [n]
 *   relative: <pos> [n] <pos> [n]
 *
 * Examples:
 *
 *     fixed: top left
 *     fixed: top 5px left
 *     fixed: top left 5px
 *     fixed: top 5px left 5px
 *
 */
// TODO: implement `position absolute top [5px] left [5px]` syntax
-pos(type, args)
	i = 0
	position: unquote(type)
	for j in (1..4)
		if length(args) > i
			{args [ i ]}: args[i + 1] is a 'unit' ? args[i += 1]:0
		i += 1
fixed()
	-pos('fixed', arguments)
absolute()
	-pos('absolute', arguments)
relative()
	-pos('relative', arguments)
